#
# makefile for CLSeek (for Microsoft NMAKE)
#

# !!!!!!!!! USER DATA !!!!!!!  (macro names must *not* be changed)
# target of the final executable w/o .exe (e.g. md5c.exe)
#
TARGET=CLSeek
MYICON=Binoculars1b.ico

# !!!!!!!!! USER DATA !!!!!!!  (macro names must *not* be changed)
# extra compiler and linker flags
#
USR_CFLAGS= -I. -DSTDC_HEADERS=1 -DHAVE_STRING_H=1
USR_LDFLAGS=
USR_LIBS=$(LIBtd)
#
LIBtd=$(CFG)/libtd.lib

# !!!!!!!!! USER DATA !!!!!!!  (macro names must *not* be changed)
# list of dependent objects (in INTDIR)
# these MUST be properly defined!!!
#
OBJS=\
!IF "$(MYICON)" != ""
	$(INTDIR)\$(TARGET).res	\
!ENDIF
	$(INTDIR)\$(TARGET).obj

# !!!!!!!!! USER DATA !!!!!!!  (macro names must *not* be changed)
# specify output and intermidiate directories
#
!IF "$(OUTDIR)" == ""
OUTDIR=$(CFG)	# output directory
!ENDIF
INTDIR=$(CFG)	# intermediate directory

# --- include common setting ---
#
# NOTE: This include file must be between ALL directives and macro
#       definitions AND ALL description blocks because the very FIRST
#       target is defined inside.
#
!IF EXISTS("nmake.setup")
!INCLUDE "nmake.setup"
!ELSEIF EXIST("..\..\make\nmake.setup")
!INCLUDE "..\..\make\nmake.setup"
!ELSE
!ERROR Warning: cannot find "nmake.setup"
!ENDIF 
#
# ---

default:	all

ALL : "$(OUTDIR)\$(TARGET).exe"

# build target executable
#	LINK32_FLAGS is defined in nmake.setup
"$(OUTDIR)\$(TARGET).exe" : $(OUTDIR) $(USR_LIBS) $(OBJS)
	$(LINK32) @<<
  $(LINK32_FLAGS) $(OBJS) $(USR_LIBS)
<<
	rm -f $(CFG)/vc60.*
!IF  "$(CFG)" == "Debug"
	cp -fv $(CFG)/$(TARGET).pdb $(CFG)/vc60.pdb
!ENDIF

!IF "$(MYICON)" != ""
$(INTDIR)\$(TARGET).res:	$(TARGET).res
	mv -fv $** $@

$(TARGET).rc:	$(MYICON)
	@echo // Icon > $@
	@echo 101	ICON	DISCARDABLE	"$**" >> $@
!ENDIF

# building required libraries...
# assumptions:
#	1. $(LIBname) directories are sibling directories
#	2. nmakefile is named $(LIBname).nmak
#
lib:
#	cd ../$(LIBname)
!IF "$(LIBname)" != ""
	nmake -nologo -f $(LIBname).nmak CFG=$(CFG)
!ENDIF

$(LIBtd):	dummy
	nmake -nologo -f $(TARGET).nmak CFG=$(CFG) LIBname=libtd lib
!IF "$(CFG)" == "Release"
# delete only in Release mode
	rm -f $(CFG)/vc60.*
!ENDIF

lib-CLEAN:
	nmake -f $(LIBname).nmak CFG=$(CFG) CLEAN

# these are extra files that generated by MSVC
# (Debug build has more files...)
#
VCEXTRA=$(INTDIR)\vc60.idb $(OUTDIR)\$(TARGET).pch
!IF "$(CFG)" == "Debug"
VCEXTRA=$(VCEXTRA) $(INTDIR)\vc60.pdb
VCMISC=$(OUTDIR)\$(TARGET).ilk $(OUTDIR)\$(TARGET).pdb
!ENDIF

# there are extra files generated by MSVC which defined in
#   $(VCEXTRA) - both Release and Debug builds
#   $(VCMISC)  - Debug build
CLEAN :
	-$(DEL) $(OUTDIR)\$(TARGET).exe
	-$(DEL) $(OBJS)
	-$(DEL) $(VCEXTRA)
!IF "$(CFG)" == "Debug"
	-$(DEL) $(VCMISC)
!ENDIF
	nmake -f $(TARGET).nmak CFG=$(CFG) LIBname=libtd lib-CLEAN

CLEAN-ALL :
	nmake -f $(TARGET).nmak CFG=Debug CLEAN
	nmake -f $(TARGET).nmak CFG=Release CLEAN

_RELEASE :
	nmake -f $(TARGET).nmak CFG=Release

dummy:
#	dummy target

# !!!!!!!!! USER DATA !!!!!!!
# header dependency (optional)
#
CLSeek.c:	dirinfo.h
dirinfo.c:	dirinfo.h mygetopt.h
mygetopt.c:	mygetopt.h

