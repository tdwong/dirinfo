##
# Microsoft NMAKE makefile default settings
#
# this file MUST be included BEFORE the first target (default or all)
#

#- Information available on the Web:
#- http://msdn.microsoft.com/library/default.asp?url=/library/en-us/vccore/html/_asug_Overview.3a_.NMAKE_Reference.asp
#-
#- Here are some findings that I learned from analyzing the md5c.mak
#- generated by MSVC6
#
#	1. NMAKE is case insensitive (e.g. ALL: and all: are the same).
#
#	2. hash sign (#) starts a comment line
#
#	3. Makefile Preprocessing Directives (as Conditionals in GNU make)
#
#		Preprocessing directives are not case sensitive. The initial
#		exclamation point (!) must appear at the beginning of the line.
#		Zero or more spaces or tabs can appear after the exclamation
#		point, for indentation. 
#
#	!CMDSWITCHES 
#		{+|-}option... Turns each option listed on or off. Spaces or
#		tabs must appear before the + or ¡V operator; none can appear
#		between the operator and the option letters. Letters are not
#		case sensitive and are specified without a slash ( / ). To
#		turn some options on and others off, use separate specifications
#		of !CMDSWITCHES. 
#		Only /D, /I, /N, and /S can be used in a makefile.
#
#	!ERROR text 
#		Displays text in error U1050, then halts NMAKE, even if /K, /I,
#		.IGNORE, !CMDSWITCHES, or the dash (¡V) command modifier is
#		used. Spaces or tabs before text are ignored. 
#
#	!MESSAGE text 
#		Displays text to standard output. Spaces or tabs before text
#		are ignored. 
#
#	!INCLUDE [<]filename[>] 
#		Reads filename as a makefile, then continues with the current
#		makefile. NMAKE searches for filename first in the specified
#		or current directory, then recursively through directories of
#		any parent makefiles, then, if filename is enclosed by angle
#		brackets (< >), in directories specified by the INCLUDE macro,
#		which is initially set to the INCLUDE environment variable.
#		Useful to pass .SUFFIXES settings, .PRECIOUS, and inference
#		rules to recursive makefiles. 
#
#	!IF constantexpression 
#		Processes statements between !IF and the next !ELSE or !ENDIF
#		if constantexpression evaluates to a nonzero value. 
#
#	!IFDEF macroname 
#		Processes statements between !IFDEF and the next !ELSE or
#		!ENDIF if macroname is defined. A null macro is considered
#		to be defined. 
#
#	!IFNDEF macroname 
#		Processes statements between !IFNDEF and the next !ELSE or
#		!ENDIF if macroname is not defined. 
#
#	!ELSE[IF constantexpression |IFDEF macroname | IFNDEF macroname] 
#		Processes statements between !ELSE and the next !ENDIF if the
#		prior !IF, !IFDEF, or !IFNDEF statement evaluated to zero. The
#		optional keywords give further control of preprocessing. 
#
#	!ELSEIF 
#		Synonym for !ELSE IF. 
#
#	!ELSEIFDEF 
#		Synonym for !ELSE IFDEF. 
#
#	!ELSEIFNDEF 
#		Synonym for !ELSE IFNDEF. 
#
#	!ENDIF 
#		Marks the end of an !IF, !IFDEF, or !IFNDEF block. Any text after
#		!ENDIF on the same line is ignored. 
#
#	!UNDEF macroname 
#		Undefines macroname. 
#
#	4. macro definition is similar to variable in Unix make
#
#	Example:
#		DEL=rm -f
#		OBJS=$(INTDIR)\md5c.obj	\
#			$(INTDIR)\mddriver.obj
#
#	Note that All string characters are literal, including surrounding
#	quotation marks (") and embedded spaces.
#
#	5. make rule (description block) is similar to Unix make rule
#
#	Example:
#		CLEAN :
#			-@$(DEL) $(EXE)
#			-@$(DEL) $(OBJS)
#
#	Where
#		1. DEL, EXE, and OBJS are already defined variables
#		2. at sign (@) and minus sign are command modifiers.
#
#	6. Command Modifiers
#
#	You can specify one or more command modifiers preceding a command,
#	optionally separated by spaces or tabs. As with commands,
#	modifiers must be indented.
#
#	Modifier
#	@command
#		Prevents display of the command. Display by commands is not
#		suppressed. By default, NMAKE echoes all executed commands.
#		Use /S to suppress display for the entire makefile; use .SILENT
#		to suppress display for part of the makefile.
#
#	-[number ]command
#		Turns off error checking for command. By default, NMAKE halts
#		when a command returns a nonzero exit code. If ¡Vnumber is used,
#		NMAKE stops if the exit code exceeds number. Spaces or tabs
#		cannot appear between the dash and number. At least one space
#		or tab must appear between number and command. Use /I to turn
#		off error checking for the entire makefile; use .IGNORE to turn
#		off error checking for part of the makefile. 
#
#	!command
#		Executes command for each dependent file if command uses $**
#		(all dependent files in the dependency) or $? (all dependent
#		files in the dependency with a later timestamp than the target). 
#
#

# ---
# NULL is needed when checking directory existence
#
!IF "$(OS)" == "Windows_NT"
NULL=
!ELSE 
NULL=nul
!ENDIF 

# ---
# TARGET is set basename of final executable (xyz.exe) and MUST be set
#
!IF "$(TARGET)" == ""
!error	Error... TARGET is not set
!ENDIF

# ---
# CFG is used to determine build type, only recognize "Debug" and "Release"
#
!IF "$(CFG)" == ""
	# undefind CFG
CFG=Debug
!ELSEIF "$(CFG)" != "Release" && "$(CFG)" != "Debug"
	# unrecognized CFG 
!message
!message Usage: NMAKE /f "$(TARGET).mak" CFG="Debug"
!message    or  NMAKE /f "$(TARGET).mak" CFG="Release"
!message
!error	Oops... Unknown CFG - "$(CFG)"
!ENDIF

# ---
# SUBSYSTEM is "console" or "windows"
#
!IF "$(SUBSYSTEM)" == "windows"
	#: Windows application
SUBSYSTEM=windows
PROGTYPE=-D_WINDOWS
!ELSE
	#: DEFAULT: Console application
SUBSYSTEM=console
PROGTYPE=
!ENDIF

# ---
# make intermediate and output directories are set
#
!IF "$(OUTDIR)" == ""
OUTDIR=$(CFG)
!ENDIF
!IF "$(INTDIR)" == ""
INTDIR=$(CFG)
!ENDIF

# ---
# building tools - these are pretty much FIXed
#
CPP=cl.exe
#MTL=midl.exe
RSC=rc.exe
#BSC32=bscmake.exe
LINK32=link.exe
LIB32=link.exe -lib
#-- DLL32=cl.exe
DLL32=link.exe -dll
#
# ---
#DEL=erase
DEL=rm -f
MOVE=move
#

# ---
# These C macros (set automatically by MSVC) are NOT defined:
#	"_CONSOLE" is defined for console .EXE
#	"_LIB" is defined for static .LIB
#	"_WINDOWS" & "_USRDLL" is defined for shared .DLL
#

# ---
# common flags - common to both Debug and Release builds
#	user-defined flags are also included in common flags.
#
#  05-15-2002 OS, HW, and BUILD are added to comply with general makefile setting
#
#!IFDEF DLLCALLER
#	# DLLCALLER requires extra flags
#DLLCFLAGS=-D_DLL
#!ENDIF
COMMON_CFLAGS=$(USR_CFLAGS) $(XTRA_CFLAGS) \
	-nologo -c -W3 -Oi -Os -Oy -Yd -YX -Zl \
	$(PROGTYPE) -DWIN32 -D_WIN32 -D_MBCS -D_X86_=1 -D_MT $(DLLCFLAGS) \
	/D "_OS_=WINDOWS" /D "_HW_=I86" /D "_BUILD_=MSVC" \
	/Fp"$(INTDIR)\$(TARGET).pch" \
	/Fo"$(INTDIR)\\" /Fd"$(INTDIR)\\"
#
#COMMON_MTL=/nologo /mktyplib203 /win32 
#
	# winsock
libsocket=wsock32.lib
#libsocket=ws2_32.lib mswsock.lib
	#
Complete_Common_Libs= \
	kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib \
	advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib \
	odbc32.lib odbccp32.lib \
	$(libc) oldnames.lib \
	$(libsocket)
Minimum_Common_Libs= \
	kernel32.lib advapi32.lib \
	$(libc) oldnames.lib \
	$(libsocket)
COMMON_LIBS= $(Complete_Common_Libs)
#
	#: /pdb was [ /pdb:"$(OUTDIR)\$(TARGET).pdb" ] in $(COMMON_LDFLAGS) 
	#: /pdb:none
COMMON_LDFLAGS=$(USR_LDFLAGS) $(XTRA_LDFLAGS) \
	/nologo /machine:I386 /subsystem:$(SUBSYSTEM) \
	/NODEFAULTLIB /OPT:REF \
	/incremental:no /pdb:"$(OUTDIR)\$(TARGET).pdb" \
	/out:"$(OUTDIR)\$(TARGET).exe"
#
COMMON_LIBFLAGS=$(USR_LIBFLAGS) $(XTRA_LIBFLAGS) \
	/nologo \
	/out:"$(OUTDIR)\$(TARGET).lib" 
#
#--when DLL32=cl.exe--
#-- COMMON_DLLFLAGS=$(USR_DLLFLAGS) $(XTRA_DLLFLAGS) \
#-- 	/nologo \
#-- 	/o"$(OUTDIR)\$(TARGET).dll"
COMMON_DLLFLAGS=$(USR_DLLFLAGS) $(XTRA_DLLFLAGS) \
	/nologo \
	/out:"$(OUTDIR)\$(TARGET).dll"
#
#BSC32_FLAGS=/nologo /o"$(OUTDIR)\$(TARGET).bsc" 
#BSC32_SBRS= \
#
#

# ---
# specific flags for Release
#
!IF  "$(CFG)" == "Release"
#
# define CLIB (use msvcrt.lib instead libc.lib which doesn't support DLL)
libc=msvcrt.lib
#
	# CFG==Release
	#:CPP_PROJ:
	# /ML - Single-Threaded - Causes the compiler to place the library
	#	name LIBC.LIB into the .OBJ file so that the linker will use
	#	LIBC.LIB to resolve external symbols. This is the compiler's
	#	default action. LIBC.LIB does not provide multithread support.  
	# /MT - Multithreaded - Defines _MT so that multithread-specific
	#	versions of the run-time routines are selected from the standard
	#	header (.H) files. This option also causes the compiler to place
	#	the library name LIBCMT.LIB into the .OBJ file so that the linker
	#	will use LIBCMT.LIB to resolve external symbols. Either /MT or /MD
	#	(or their debug equivalents /MTd or /MDd) is required to create
	#	multithreaded programs.
	# /MD - MD Multithreaded DLL - Defines _MT and _DLL so that both
	#	multithread- and DLL-specific versions of the run-time routines are
	#	selected from the standard .H files. This option also causes the
	#	compiler to place the library name MSVCRT.LIB into the .OBJ file. 
	#	Applications compiled with this option are statically linked to
	#	MSVCRT.LIB. This library provides a layer of code that allows the
	#	linker to resolve external references. The actual working code is
	#	contained in MSVCRT.DLL, which must be available at run time to
	#	applications linked with MSVCRT.LIB. 
#
# define Multithreaded (use /MD instead of /MT which doesn't support DLL)
MTLIB=/MD
#
CPP_PROJ=$(COMMON_CFLAGS) $(MTLIB) -Og -Ox /D "NDEBUG"
#MTL_PROJ=$(COMMON_MTL) /D "NDEBUG"
LINK32_FLAGS=$(COMMON_LIBS) $(COMMON_LDFLAGS)
#--when DLL32=cl.exe--
#-- DLL32_FLAGS=$(COMMON_DLLFLAGS) /LD /MD

#
# ---
# specific flags for Debug
#
!ELSEIF  "$(CFG)" == "Debug"
#
# define CLIB (use msvcrtd.lib instead libcd.lib which doesn't support DLL)
libc=msvcrtd.lib
#
	# CFG==Debug
	#:CPP_PROJ:
	# /MLd - Debug Single-Threaded - Defines _DEBUG and causes the
	#	compiler to place the library name LIBCD.LIB into the .OBJ
	#	file so that the linker will use LIBCD.LIB to resolve external
	#	symbols. LIBCD.LIB does not provide multithread support.  
	# /MTd - Debug Multithreaded - Defines _DEBUG and _MT. Defining _MT
	#	causes multithread-specific versions of the run-time routines to
	#	be selected from the standard .H files. This option also causes
	#	the compiler to place the library name LIBCMTD.LIB into the .OBJ
	#	file so that the linker will use LIBCMTD.LIB to resolve external
	#	symbols. Either /MTd or /MDd (or their non-debug equivalents /MT
	#	or MD) is required to create multithreaded programs.
	# /MDd - Debug Multithreaded DLL - Defines _DEBUG, _MT, and _DLL so
	#	that debug multithread- and DLL-specific versions of the run-time
	#	routines are selected from the standard .H files. It also causes the
	#	compiler to place the library name MSVCRTD.LIB into the .OBJ file.
#
# define Multithreaded (use /MDd instead of /MTd which doesn't support DLL)
!IF "$(SUBSYSTEM)" == "console"
MTLIB=/MDd
!ELSE
MTLIB=/MLd
!ENDIF
#
CPP_PROJ=$(COMMON_CFLAGS) /Gm /GZ $(MTLIB) -Od -Zi /D "_DEBUG"
#MTL_PROJ=$(COMMON_MTL) /D "_DEBUG"
LINK32_FLAGS=$(COMMON_LIBS) $(COMMON_LDFLAGS) /debug /pdbtype:sept
#--when DLL32=cl.exe--
#-- DLL32_FLAGS=$(COMMON_DLLFLAGS) /LDd /MDd
!ENDIF 

# ---
# no difference between Debug and Release build found yet
DLL32_FLAGS=$(COMMON_DLLFLAGS)
LIB32_FLAGS=$(COMMON_LIBFLAGS)
#

# ---
#	Filename Macros
#
# Filename macros are predefined as filenames specified in the
# dependency (not full filename specifications on disk). These macros do
# not need to be enclosed in parentheses when invoked; specify only a $
# as shown.
#
# Macro Meaning 
#
#	$@		Current target's full name (path, base name, extension), as currently specified. 
#	$$@		Current target's full name (path, base name, extension), as currently specified. Valid only as a dependent in a dependency. 
#	$*		Current target's path and base name minus file extension. 
#	$**		All dependents of the current target. 
#	$?		All dependents with a later timestamp than the current target. 
#	$<		Dependent file with a later timestamp than the current target. Valid only in commands in inference rules. 
#
# To specify part of a predefined filename macro, append a macro
# modifier and enclose the modified macro in parentheses.
#
# Modifier Resulting filename part 
#
#	D		Drive plus directory 
#	B		Base name 
#	F		Base name plus extension 
#	R		Drive plus directory plus base name 
#

# ---
# explicit rules
#

.c{$(INTDIR)}.obj::
   @echo Compiling $<
#   $(CPP) $(CPP_PROJ) $< 
   $(CPP) @<<
   $(CPP_PROJ) $< 
<<

.cpp{$(INTDIR)}.obj::
   @echo Compiling $<
#   $(CPP) $(CPP_PROJ) $< 
   $(CPP) @<<
   $(CPP_PROJ) $< 
<<

.cxx{$(INTDIR)}.obj::
   @echo Compiling $<
#   $(CPP) $(CPP_PROJ) $< 
   $(CPP) @<<
   $(CPP_PROJ) $< 
<<

.c{$(INTDIR)}.sbr::
   $(CPP) @<<
   $(CPP_PROJ) $< 
<<

.cpp{$(INTDIR)}.sbr::
   $(CPP) @<<
   $(CPP_PROJ) $< 
<<

.cxx{$(INTDIR)}.sbr::
   $(CPP) @<<
   $(CPP_PROJ) $< 
<<

.rc{$(INTDIR)}.res::
   $(RSC) -r $<

# ----
# NOTE: everything before first target will be properly processed by NMAKE
#       (including all checking and setting).
# ----
# "default" is the FIRST target
#
.DEFAULT :	DEFAULT all

# create output directory if necessary
!IFDEF OUTDIR
$(OUTDIR):
	if not exist "$(OUTDIR)/$(NULL)" mkdir "$(OUTDIR)"
!ENDIF

# create intermediate directory if necessary
!IF "$(INTDIR)" != "" && "$(INTDIR)" != "$(OUTDIR)"
$(INTDIR):
	if not exist "$(INTDIR)/$(NULL)" mkdir "$(INTDIR)"
!ENDIF

#
.EchoEnv:
	-@echo --- Some ENVIRONMENT Variables ---
	-@echo -
	-@echo CFG=$(CFG)
	-@echo SUBSYSTEM=$(SUBSYSTEM)
	-@echo LIBNAME=$(LIBNAME)
	-@echo DLLNAME=$(DLLNAME)
	-@echo DLLCALLER=$(DLLCALLER)
	-@echo -
	-@echo COMMON_CFLAGS=$(COMMON_CFLAGS)
	-@echo COMMON_LIBS=$(COMMON_LIBS)
	-@echo COMMON_LDFLAGS=$(COMMON_LDFLAGS)
	-@echo COMMON_LIBFLAGS=$(COMMON_LIBFLAGS)
	-@echo -
	-@echo CPP_PROJ=$(CPP_PROJ)
	-@echo LINK32_FLAGS=$(LINK32_FLAGS)
	-@echo LIB32_FLAGS=$(LIB32_FLAGS)
#
#

##################################################
#
# CL /help
#                           C/C++ COMPILER OPTIONS
# 
#                               -OPTIMIZATION-
# 
# /O1 minimize space                       /Op[-] improve floating-pt consistency
# /O2 maximize speed                       /Os favor code space
# /Oa assume no aliasing                   /Ot favor code speed
# /Ob<n> inline expansion (default n=0)    /Ow assume cross-function aliasing
# /Od disable optimizations (default)      /Ox maximum opts. (/Ogityb1 /Gs)
# /Og enable global optimization           /Oy[-] enable frame pointer omission
# /Oi enable intrinsic functions
# 
#                              -CODE GENERATION-
# 
# /G3 optimize for 80386                   /Gy separate functions for linker
# /G4 optimize for 80486                   /Ge force stack checking for all funcs
# /G5 optimize for Pentium                 /Gs[num] disable stack checking calls
# /G6 optimize for Pentium Pro             /Gh enable hook function call
# /GB optimize for blended model (default) /GR[-] enable C++ RTTI
# /Gd __cdecl calling convention           /GX[-] enable C++ EH (same as /EHsc)
# /Gr __fastcall calling convention        /Gi[-] enable incremental compilation
# /Gz __stdcall calling convention         /Gm[-] enable minimal rebuild
# /GA optimize for Windows Application     /EHs enable synchronous C++ EH
# /GD optimize for Windows DLL             /EHa enable asynchronous C++ EH
# /Gf enable string pooling                /EHc extern "C" defaults to nothrow
# /GF enable read-only string pooling      /QIfdiv[-] enable Pentium FDIV fix 
# /GZ enable runtime debug checks          /QI0f[-] enable Pentium 0x0f fix
# 
#                               -OUTPUT FILES-
# 
# /Fa[file] name assembly listing file     /Fo<file> name object file
# /FA[sc] configure assembly listing       /Fp<file> name precompiled header file
# /Fd[file] name .PDB file                 /Fr[file] name source browser file
# /Fe<file> name executable file           /FR[file] name extended .SBR file
# /Fm[file] name map file
# 
#                               -PREPROCESSOR-
# 
# /C don't strip comments                  /FI<file> name forced include file
# /D<name>{=|#}<text> define macro         /U<name> remove predefined macro
# /E preprocess to stdout                  /u remove all predefined macros
# /EP preprocess to stdout, no #line       /I<dir> add to include search path
# /P preprocess to file                    /X ignore "standard places"
# 
#                                 -LANGUAGE-
# 
# /Zi enable debugging information         /Zl omit default library name in .OBJ
# /ZI enable Edit and Continue debug info  /Zg generate function prototypes
# /Z7 enable old-style debug info          /Zs syntax check only
# /Zd line number debugging info only      /vd{0|1} disable/enable vtordisp
# /Zp[n] pack structs on n-byte boundary   /vm<x> type of pointers to members
# /Za disable extensions (implies /Op)     /noBool disable "bool" keyword
# /Ze enable extensions (default)
# 
#                               -MISCELLANEOUS-
# 
# /?, /help print this help message        /V<string> set version string
# /c compile only, no link                 /w disable all warnings
# /H<num> max external name length         /W<n> set warning level (default n=1)
# /J default char type is unsigned         /WX treat warnings as errors
# /nologo suppress copyright message       /Yc[file] create .PCH file
# /Tc<source file> compile file as .c      /Yd put debug info in every .OBJ
# /Tp<source file> compile file as .cpp    /Yu[file] use .PCH file
# /TC compile all files as .c              /YX[file] automatic .PCH
# /TP compile all files as .cpp            /Zm<n> max memory alloc (% of default)
# 
#                                  -LINKING-
# 
# /MD link with MSVCRT.LIB                 /MDd link with MSVCRTD.LIB debug lib
# /ML link with LIBC.LIB                   /MLd link with LIBCD.LIB debug lib
# /MT link with LIBCMT.LIB                 /MTd link with LIBCMTD.LIB debug lib
# /LD Create .DLL                          /F<num> set stack size
# /LDd Create .DLL debug libary            /link [linker options and libraries]
# 

##################################################
#
# Microsoft (R) Incremental Linker Version 6.00.8168
# Copyright (C) Microsoft Corp 1992-1998. All rights reserved.
# 
# usage: LINK [options] [files] [@commandfile]
# 
#    options:
# 
#       /ALIGN:#
#       /BASE:{address|@filename,key}
#       /COMMENT:comment
#       /DEBUG
#       /DEBUGTYPE:{CV|COFF}
#       /DEF:filename
#       /DEFAULTLIB:library
#       /DELAY:{NOBIND|UNLOAD}
#       /DELAYLOAD:dll
#       /DLL
#       /DRIVER[:{UPONLY|WDM}]
#       /ENTRY:symbol
#       /EXETYPE:DYNAMIC
#       /EXPORT:symbol
#       /FIXED[:NO]
#       /FORCE[:{MULTIPLE|UNRESOLVED}]
#       /GPSIZE:#
#       /HEAP:reserve[,commit]
#       /IMPLIB:filename
#       /INCLUDE:symbol
#       /INCREMENTAL:{YES|NO}
#       /LARGEADDRESSAWARE[:NO]
#       /LIBPATH:dir
#       /LINK50COMPAT
#       /MACHINE:{ALPHA|ARM|IX86|MIPS|MIPS16|MIPSR41XX|PPC|SH3|SH4}
#       /MAP[:filename]
#       /MAPINFO:{EXPORTS|FIXUPS|LINES}
#       /MERGE:from=to
#       /NODEFAULTLIB[:library]
#       /NOENTRY
#       /NOLOGO
#       /OPT:{ICF[,iterations]|NOICF|NOREF|NOWIN98|REF|WIN98}
#       /ORDER:@filename
#       /OUT:filename
#       /PDB:{filename|NONE}
#       /PDBTYPE:{CON[SOLIDATE]|SEPT[YPES]}
#       /PROFILE
#       /RELEASE
#       /SECTION:name,[E][R][W][S][D][K][L][P][X]
#       /STACK:reserve[,commit]
#       /STUB:filename
#       /SUBSYSTEM:{NATIVE|WINDOWS|CONSOLE|WINDOWSCE|POSIX}[,#[.##]]
#       /SWAPRUN:{CD|NET}
#       /VERBOSE[:LIB]
#       /VERSION:#[.#]
#       /VXD
#       /WARN[:warninglevel]
#       /WINDOWSCE:{CONVERT|EMULATION}
#       /WS:AGGRESSIVE
#

#
##################################################
#
# Usage:	NMAKE @commandfile
# 	NMAKE [options] [/f makefile] [/x stderrfile] [macrodefs] [targets]
# 
# Options:
# 
# /A Build all evaluated targets
# /B Build if time stamps are equal
# /C Suppress output messages
# /D Display build information
# /E Override env-var macros
# /HELP Display brief usage message
# /I Ignore exit codes from commands
# /K Build unrelated targets on error
# /N Display commands but do not execute
# /NOLOGO Suppress copyright message
# /P Display NMAKE information
# /Q Check time stamps but do not build
# /R Ignore predefined rules/macros
# /S Suppress executed-commands display
# /T Change time stamps but do not build
# /U Dump inline files
# /Y Disable batch-mode 
# /? Display brief usage message
# 

